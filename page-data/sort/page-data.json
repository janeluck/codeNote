{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/sort/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"sortÊéíÂ∫è\",\n  \"tags\": [\"javascript\", \"algorithm\"],\n  \"emoji\": \"üëã\",\n  \"link\": \"https://janeluck.github.io/codeNote/sort\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u627E\\u51FA\\u6570\\u7EC4\\u4E2D\\u6700\\u5C0F\\u7684k\\u4E2A\\u6570\\u3002\\u4EE5\\u4EFB\\u610F\\u987A\\u5E8F\\u8FD4\\u56DE\\u8FD9k\\u4E2A\\u6570\\u5747\\u53EF\")), mdx(\"p\", null, \"\\u6392\\u5E8F\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"O(N*N)\\u5192\\u6CE1\\u3001\\u63D2\\u5165\\u3001\\u9009\\u62E9\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"O(NlogN)\\u5FEB\\u6392\\u3001\\u5F52\\u5E76\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"todo \\u5806\\u6392\\u5E8F\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"/*\\n*\\u8BBE\\u8BA1\\u4E00\\u4E2A\\u7B97\\u6CD5\\uFF0C\\u627E\\u51FA\\u6570\\u7EC4\\u4E2D\\u6700\\u5C0F\\u7684k\\u4E2A\\u6570\\u3002\\u4EE5\\u4EFB\\u610F\\u987A\\u5E8F\\u8FD4\\u56DE\\u8FD9k\\u4E2A\\u6570\\u5747\\u53EF\\u3002\\n\\u793A\\u4F8B\\uFF1A\\n\\u8F93\\u5165\\uFF1A arr = [1,3,5,7,2,4,6,8], k = 4\\n\\u8F93\\u51FA\\uFF1A [1,2,3,4]\\n\\u63D0\\u793A\\uFF1A\\n0 <= len(arr) <= 100000\\n0 <= k <= min(100000, len(arr))\\n\\u6765\\u6E90\\uFF1A\\u529B\\u6263\\uFF08LeetCode\\uFF09\\n\\u94FE\\u63A5\\uFF1Ahttps://leetcode-cn.com/problems/smallest-k-lcci\\n\\u8457\\u4F5C\\u6743\\u5F52\\u9886\\u6263\\u7F51\\u7EDC\\u6240\\u6709\\u3002\\u5546\\u4E1A\\u8F6C\\u8F7D\\u8BF7\\u8054\\u7CFB\\u5B98\\u65B9\\u6388\\u6743\\uFF0C\\u975E\\u5546\\u4E1A\\u8F6C\\u8F7D\\u8BF7\\u6CE8\\u660E\\u51FA\\u5904\\u3002\\n* */\\n\\n/**\\n * @param {number[]} arr\\n * @param {number} k\\n * @return {number[]}\\n */\\nconst smallestK = function (arr, k) {\\n  for (let i = 0; i < arr.length; i++) {\\n    for (let j = i + 1; j < arr.length; j++) {\\n      if (arr[j] < arr[i]) {\\n        const temp = arr[i];\\n        arr[i] = arr[j];\\n        arr[j] = temp;\\n      }\\n    }\\n  }\\n  return arr.slice(0, k);\\n};\\nconsole.log(smallestK([1, 3, 5, 7, 2, 4, 6, 8], 4));\\n\\n// \\u5192\\u6CE1\\u6CD5\\uFF0C \\u6BCF\\u8F6E\\u6311\\u9009\\u672A\\u6392\\u5E8F\\u7684\\u6700\\u5927\\u6570\\uFF0C\\u653E\\u5230\\u6570\\u7EC4\\u672B\\u5C3E\\u3002\\u589E\\u52A0\\u6807\\u8BC6\\u4F4D\\u63D0\\u9AD8\\u6548\\u7387\\n// \\u65F6\\u95F4\\u590D\\u6742\\u5EA6 o(N*N)\\n\\nconst bubble = function (arr, k) {\\n  for (let i = 0; i < arr.length; i++) {\\n    let change = false;\\n    for (let j = 0; j < arr.length - i - 1; j++) {\\n      if (arr[j + 1] < arr[j]) {\\n        const temp = arr[j + 1];\\n        arr[j + 1] = arr[j];\\n        arr[j] = temp;\\n        change = true;\\n      }\\n    }\\n    if (!change) return arr.slice(0, k);\\n  }\\n  return arr.slice(0, k);\\n};\\n\\nconsole.log(bubble([1, 3, 5, 7, 2, 4, 6, 8], 4));\\n\\n// \\u63D2\\u5165  \\u4F9D\\u6B21\\u53D6\\u6570\\u7EC4\\u4E2D\\u7684\\u5143\\u7D20 \\u63D2\\u5165\\u5DF2\\u6709\\u7684\\u6709\\u5E8F\\u5217\\uFF0C\\u521D\\u59CB\\u6709\\u5E8F\\u5217\\u4E3A\\u6570\\u7EC4\\u7684\\u7B2C\\u4E00\\u4E2A\\u5143\\u7D20\\n// O(N*N)\\n\\nconst insert = function (arr, k) {\\n  for (let i = 1; i < arr.length; i++) {\\n    for (let j = i; j > 0; j--) {\\n      if (arr[j] < arr[j - 1]) {\\n        const temp = arr[j];\\n        arr[j] = arr[j - 1];\\n        arr[j - 1] = temp;\\n      } else {\\n        break;\\n      }\\n    }\\n  }\\n  return arr.slice(0, k);\\n};\\n\\n\\nconsole.log(insert([1, 3, 5, 7, 2, 4, 6, 8], 4));\\n\\n// \\u9009\\u62E9  \\u4ECE\\u5750\\u68070\\u5F00\\u59CB\\uFF0C\\u6BCF\\u6B21\\u9009\\u53D6\\u672A\\u6392\\u5E8F\\u4E2D\\u7684\\u6700\\u5C0F\\u6570\\u4E0E\\u5F53\\u524D\\u5750\\u6807\\u4EA4\\u6362\\u6570\\u5B57\\n// O(N*N)\\n\\nconst select = function (arr, k) {\\n  for (let i = 0; i < arr.length; i++) {\\n    let minIndex = i;\\n    const\\n      value = arr[i];\\n    for (let j = i + 1; j < arr.length; j++) {\\n      if (arr[minIndex] > arr[j]) {\\n        minIndex = j;\\n      }\\n    }\\n\\n    arr[i] = arr[minIndex];\\n    arr[minIndex] = value;\\n  }\\n  return arr.slice(0, k);\\n};\\n\\n\\nconsole.log(select([1, 3, 5, 7, 2, 4, 6, 8], 4));\\n\\n\\n// \\u5FEB\\u6392\\u6CD5 \\u6311\\u9009\\u961F\\u5217\\u6700\\u540E\\u4E00\\u4E2A\\u5143\\u7D20\\uFF0C\\u4ECE\\u5934\\u5230\\u5C3E\\u904D\\u5386\\uFF0C\\u5C0F\\u4E8E\\u5176\\u7684\\u63A8\\u5165left\\u6570\\u7EC4\\uFF0C\\u5927\\u4E8E\\u7684\\u63A8\\u5165right\\u6570\\u7EC4\\u3002\\u76F4\\u5230\\u6570\\u7EC4\\u5143\\u7D20<=1,\\u8FD4\\u56DEleft.concat(current).concat(right)\\nconst quick = function (arr) {\\n  if (arr.length <= 1) return arr;\\n  const left = [];\\n  const right = [];\\n  for (let i = 0; i < arr.length - 1; i++) {\\n    if (arr[i] <= arr[arr.length - 1]) {\\n      left.push(arr[i]);\\n    } else {\\n      right.push(arr[i]);\\n    }\\n  }\\n  return quick(left)\\n    .concat(arr[arr.length - 1])\\n    .concat(quick(right));\\n};\\n\\nfunction smallestKQuick(arr, k) {\\n  return quick(arr)\\n    .slice(0, k);\\n}\\n\\nconsole.log(smallestKQuick([1, 3, 5, 7, 2, 4, 6, 8], 4));\\n\\n// \\u5F52\\u5E76\\u6392\\u5E8F\\u6CD5\\n// \\u4EE5\\u4E2D\\u95F4\\u4F4D\\u7F6E\\u5206\\u5F00\\u4E3Aleft\\u3001right\\u6570\\u7EC4\\uFF0Cmerge  left \\u548Cright\\uFF0Cleft\\u548Cright\\u4E5F\\u505AmergeSort\\u5904\\u7406\\n// \\u9700\\u8981mergeSort\\u548Cmerge\\u4E24\\u4E2A\\u65B9\\u6CD5\\uFF0CmergeSort\\u7684\\u7EC8\\u6B62\\u6761\\u4EF6\\u662Farr\\u7684\\u957F\\u5EA6<=1\\n// merge\\u662F\\u6BD4\\u8F83left\\u3001right\\u7684\\u5143\\u7D20\\uFF0C\\u76F4\\u5230\\u67D0\\u4E00\\u4E2A\\u6570\\u7EC4\\u5230\\u6700\\u540E\\uFF0C\\u7136\\u540Eresult concat \\u5DE6\\u53F3\\u4E24\\u6570\\u7EC4\\u5269\\u4F59\\u7684\\u5143\\u7D20\\uFF08\\u53EA\\u6709\\u4E00\\u4E2A\\u6570\\u7EC4\\u4F1A\\u5269\\u4E0B\\uFF0C\\u4F46\\u662F\\u65B9\\u4FBF\\u5199\\uFF0C\\u5C31\\u4E00\\u8D77concat\\uFF09\\n\\n\\nconst merge = function (left, right) {\\n  let i = 0;\\n  let\\n    j = 0;\\n  const result = [];\\n  while (i < left.length && j < right.length) {\\n    if (left[i] < right[j]) {\\n      result.push(left[i]);\\n      i += 1;\\n    } else {\\n      result.push(right[j]);\\n      j += 1;\\n    }\\n  }\\n  return result.concat(left.slice(i))\\n    .concat(right.slice(j));\\n};\\n\\nconst mergeSort = function (arr) {\\n  if (arr.length <= 1) {\\n    return arr;\\n  }\\n  const point = Math.floor(arr.length / 2);\\n  const left = arr.slice(0, point);\\n  const right = arr.slice(point);\\n\\n  return merge(mergeSort(left), mergeSort(right));\\n};\\n\\nfunction smallestKMerge(arr, k) {\\n  return mergeSort(arr)\\n    .slice(0, k);\\n}\\n\\nconsole.log(smallestKMerge([1, 3, 5, 7, 2, 4, 6, 8], 4));\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"sortÊéíÂ∫è","tags":["javascript","algorithm"],"emoji":"üëã","link":"https://janeluck.github.io/codeNote/sort"},"fields":{"dateModified":"18th Aug 2020","slug":"/sort/"},"tableOfContents":{},"parent":{"__typename":"File","relativePath":"sort.md"}}},"pageContext":{"id":"a8f66a56-43c1-5414-b109-bf98b5d570bc","previous":{"id":"b963c5d6-1028-50be-a64e-3b4bfcf82970","frontmatter":{"title":"deepCloneÊ∑±Êã∑Ë¥ù","tags":["javascript"]},"fields":{"slug":"/deepClone/"}},"next":{"id":"cf850610-7b9a-558c-9715-f41af52eaf6d","frontmatter":{"title":"Èò≤Êäñ(debounce)ÂíåËäÇÊµÅ(throttle)","tags":["javascript"]},"fields":{"slug":"/debounceVSthrottle/"}},"hasUntagged":false,"basePath":"/"}}}